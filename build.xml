<?xml version="1.0"?>
<project 
  name="Phing-QueryPath" 
  description="QueryPath tasks for Phing integration."
  default="info">
<!--
This is the Phing build file for Phing-QueryPath.

Phing is a build tool. Learn more about it at http://phing.info.

Copyright (c) 2010, Matt Butcher, some rights reserved.

License:
Phing-QueryPath is released under an MIT license. See COPYING-MIT.txt for details.
-->
  <target name="info" description="Information on using the Phing-QueryPath Phing build.">
    <echo>
To build Phing-QueryPath, run:

  phing build
  
This will create a generic dev release of Phing-QueryPath and copy the releasable files to the dist/ directory. All documentation will be generated, and both a minimal and full version of the code will be generated. The non-compressed files will be available for inspection in bin/build/.

A numbered release can be built with:

  phing build -Dversion=2.0-Alpha1

These are the basic tasks we anticipate performing with phing. However, the build script supports the running of several other tasks which may help you when debugging or developing Phing-QueryPath. Important ones are listed below. A complete list can be obtained by running 'phing -l' in this directory.

To generate docs, do:

  phing doc

Documentation will be stored in docs/. You can start with docs/index.html.

To run unit tests, do:

  phing test

The above will generate HTML test results which will be placed in test/reports/. If you wish to run the test and print the results directly the the command line, you should run 'phing ftest' instead.

To run coverage analysis, do:

  phing coverage
  
This will create HTML pages describing code coverage. The coverage analysis will be available in test/coverage
  
To print this message, do:

  phing info

    </echo>
  </target>


  <!-- Global properties -->
  <property name="srcdir" value="./src"/>
  <property name="testdir" value="./tests"/>
  <property name="builddir" value="./bin/build"/>
  <property name="docsdir" value="./doc"/>
  <property name="packagedir" value="./dist"/>
  <property name="pearchannel" value="../pear.querypath.org/pear"/>
  
  <!-- Path to QueryPath. -->
  <includepath classpath="../querypath/src"/>
  
  <!-- Path to Phing-QueryPath -->
  <includepath classpath="./src"/>
  
  <!-- Task definitions that we will use here. -->
  <taskdef classname="PhingQueryPath.Task.QueryPathReplacementTask" name="qpreplace"/>
  
  <includepath classpath="../Phing-Pirum/src"/>
  
  <taskdef classname="PhingPirum.Task.PirumBuildTask" name="pirumbuild"/>
  <taskdef classname="PhingPirum.Task.PirumAddTask" name="pirumadd"/>
  
  <!-- Files that must be included in the release -->
  <fileset id="licensefiles" dir=".">
    <include name="README.mdown"/>
    <include name="COPYING-MIT.txt"/>
  </fileset>
  
  <!-- Files to be treated as source code -->
  <fileset id="sourcecode" dir="${srcdir}">
    <include name="**/*.php" />
  </fileset>

  <!-- BUILD: The primary build target. -->
  <target name="build" depends="lint, setup, fullBuild"
    description="Do a full build."
    ></target>
  
  <!-- Target that should be run always. -->
  <target name="setup" description="Run required configuration for any build.">
    <tstamp/>
    <!-- Default version -->
    <property name="version" value="1.0.0dev${DSTAMP}"/>
  </target>
  
  <!-- Build the full package -->
  <target name="fullBuild" description="Full Phing-QueryPath build, including docs."
    depends="setup,setPearStability">
    <property name="releasedir" value="${builddir}/PhingQueryPath-${version}" override="true"/>
    <delete dir="${releasedir}" />
    
    <!-- Make all necessary directories. -->
    <mkdir dir="${releasedir}"/>
    
    <!--
    <mkdir dir="${releasedir}/src"/>
    <mkdir dir="${releasedir}/examples"/>
    <mkdir dir="${releasedir}/test"/>
    <mkdir dir="${releasedir}/tutorials"/>
    <mkdir dir="${releasedir}/doc"/>
    -->
    
    <!-- Copy license files. -->
    <copy todir="${releasedir}">
      <fileset refid="licensefiles"/>
    </copy>
    
    <!-- Copy source code, doing token replacement on version. -->
    <copy todir="${releasedir}">
      <filterchain>
        <replacetokens begintoken="@" endtoken="@">
          <token key="UNSTABLE" value="${version}"/>
        </replacetokens>
      </filterchain>
      <fileset refid="sourcecode"/>
    </copy>
    
    <!-- Generate PEAR package. -->
    <pearpkg2 name="PhingQueryPath" dir="./">
       <fileset dir="${releasedir}">
         <include name="**/**"/>
       </fileset>
       <option name="uri" value="http://querypath.org"/>
       <option name="packagefile" value="package2.xml"/>
       <option name="channel" value="pear.querypath.org"/>
       
       <option name="baseinstalldir" value="PhingQueryPath"/>

       <option name="summary" value="Phing integration with QueryPath"/>
       <option name="description" value="Provides QueryPath tasks for Phing. Useful for post-processing HTML and XML during builds. http://querypath.org"/>
       <option name="apiversion" value="${version}"/>
       <option name="apistability" value="${stability}"/>
       <option name="releaseversion" value="${version}"/>
       <option name="releasestability" value="${stability}"/>
       <option name="license" value="MIT"/>
       <option name="phpdep" value="5.0.0"/>
       <option name="pearinstallerdep" value="1.4.6"/>
       <option name="packagetype" value="php"/>
       <option name="notes" value="Latest info is available at http://github.com/technosophos/Phing-QueryPath"/>
       <option name="outputdirectory" value="./${builddir}"/>
       <option name="packagedirectory" value="./${releasedir}"/>
       <mapping name="maintainers">
        <element>
         <element key="handle" value="technosophos"/>
         <element key="name" value="M Butcher"/>
         <element key="email" value="matt@aleph-null.tv"/>
         <element key="role" value="lead"/>
        </element>
       </mapping>
       <mapping name="deps">
         <element>
           <element key="channel" value="pear.querypath.org"/>
           <element key="name" value="querypath/QueryPath"/>
           <element key="version" value="2.1.0beta1"/>
           <element key="max" value="2.1.99"/>
           <element key="recommended" value="2.1.0"/>
         </element>
       </mapping>
    </pearpkg2>
    
    <move file="${builddir}/package2.xml" tofile="${builddir}/package.xml"/>

    <!-- Create tgz and zip versions. -->
    <tar destfile="${packagedir}/PhingQueryPath-${version}.tgz" compression="gzip">
      <fileset dir="${builddir}">
        <include name="PhingQueryPath-${version}/**/*"/>
        <include name="package.xml"/>
      </fileset>
    </tar>
    <pirumadd targetdir="${pearchannel}" packagefile="${packagedir}/PhingQueryPath-${version}.tgz"/>
  </target>
  
  <!-- Check syntax -->
  <target name="lint" description="Check syntax of source.">
    <phplint>
      <fileset refid="sourcecode" />
    </phplint>
  </target>
  
  <!-- Run a full test and format an HTML report -->
  <target name="test" depends="lint" description="Run full tests">
    <property name="text.xml" value="${testdir}/test.xml"/>
    
    <copy todir="${testdir}/run">
      <fileset dir="${testdir}">
        <include name="*.xml"/>
      </fileset>
    </copy>
    
    <qpreplace>
      <fileset dir="${testdir}/run">
        <include name="*.xml"/>
      </fileset>
      <rule selector="targetOne">FOO</rule>
      <rule selector="div>targetTwo">FOO2</rule>
      <rule selector="#three>targetThree">FOO3</rule>
    </qpreplace>
  </target>
  
  <target name="setPearStability" depends="setup">
    <property name="stability">stable</property>
    <if>
      <contains string="${version}" substring="dev"/>
      <then>
        <property name="stability" override="true">snapshot</property>
      </then>
      <elseif>
        <contains string="${version}" substring="alpha"/>
        <then>
          <property name="stability" override="true">alpha</property>
        </then>
      </elseif>
      <elseif>
        <contains string="${version}" substring="beta"/>
        <then>
          <property name="stability" override="true">beta</property>
        </then>
      </elseif>
    </if>
    <echo>${stability}</echo>
  </target>
</project>